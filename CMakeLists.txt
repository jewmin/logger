# cmake版本
CMAKE_MINIMUM_REQUIRED(VERSION 3.7.2)

# 项目名
PROJECT(liblogger VERSION 1.0)

# 开关
OPTION(VLD "use Visual Leak Detector to check memory on windows" ON)
OPTION(RELEASE "compile the release version" OFF)

# 设置模块路径
SET(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${PROJECT_SOURCE_DIR}/3rd/vld)

# 平台
IF(MSVC)
	SET(WINDOWS ON)
	SET(LINUX OFF)
ELSEIF(CMAKE_COMPILER_IS_GNUCXX)
	SET(WINDOWS OFF)
	SET(LINUX ON)
	SET(VLD OFF)
ENDIF()

# 显示参数
MESSAGE(STATUS "VLD:" ${VLD})
MESSAGE(STATUS "RELEASE:" ${RELEASE})
MESSAGE(STATUS "WINDOWS:" ${WINDOWS})
MESSAGE(STATUS "LINUX:" ${LINUX})

# 添加源文件
SET(all_srcs
	${PROJECT_SOURCE_DIR}/Logger.h
	${PROJECT_SOURCE_DIR}/TimeStamp.h
	${PROJECT_SOURCE_DIR}/TimeStamp.cc
	${PROJECT_SOURCE_DIR}/StringUtil.h
	${PROJECT_SOURCE_DIR}/StringUtil.cc
)

# 设置输出目录
SET(CMAKE_DEBUG_POSTFIX "d")
SET(CMAKE_SUPPRESS_REGENERATION true)
SET(OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/output)
SET(OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIRECTORY})
SET(OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIRECTORY})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIRECTORY_DEBUG})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIRECTORY_DEBUG})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${OUTPUT_DIRECTORY_DEBUG})
SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIRECTORY_RELEASE})
SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIRECTORY_RELEASE})
SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${OUTPUT_DIRECTORY_RELEASE})

# 编译项
IF(WINDOWS)
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} /MDd")
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /MD")
	ADD_DEFINITIONS(-D_CRT_SECURE_NO_WARNINGS)
	ADD_DEFINITIONS(-D_CRT_NONSTDC_NO_WARNINGS)
	ADD_COMPILE_OPTIONS(/utf-8)
ELSEIF(LINUX)
	SET(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -O0 -Wall -ggdb")
	SET(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} -O2 -Wall")
	SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread -std=c++11")
	ADD_DEFINITIONS(-m64)
ENDIF()

# 显式输出编译选项
IF(RELEASE)
	SET(CMAKE_BUILD_TYPE Release)
	MESSAGE(STATUS "flags:" ${CMAKE_CXX_FLAGS_RELEASE} ${CMAKE_CXX_FLAGS})
ELSE()
	SET(CMAKE_BUILD_TYPE Debug)
	MESSAGE(STATUS "flags:" ${CMAKE_CXX_FLAGS_DEBUG} ${CMAKE_CXX_FLAGS})
ENDIF()

# 头文件
INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR})

# vld
IF(VLD)
	FIND_PACKAGE(VLD)
	IF(VLD_FOUND)
		ADD_DEFINITIONS(-DUSE_VLD)
		INCLUDE_DIRECTORIES(${VLD_INCLUDE_DIRS})
	ENDIF()
ENDIF()

# 生成静态库、动态库
ADD_LIBRARY(logger-static STATIC ${all_srcs})
ADD_LIBRARY(logger SHARED ${all_srcs})
ADD_EXECUTABLE(logger-test Main.cc)
TARGET_LINK_LIBRARIES(logger-test logger-static)
IF(WINDOWS)
	TARGET_COMPILE_DEFINITIONS(logger PRIVATE BUILDING_NET_SHARED)
	TARGET_LINK_LIBRARIES(logger-test ${VLD_LIBRARIES})
ELSEIF(LINUX)
	TARGET_COMPILE_OPTIONS(logger PRIVATE -fPIC -fvisibility=hidden)
ENDIF()